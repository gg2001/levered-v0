/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PositionInterface extends ethers.utils.Interface {
  functions: {
    "borrow(address,address,uint256,uint256,uint16,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "setUserUseReserveAsCollateral(address,address,bool)": FunctionFragment;
    "swapBorrowRateMode(address,address,uint256)": FunctionFragment;
    "withdraw(address,address,address,uint256,address)": FunctionFragment;
    "withdrawETH(address,uint256)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class Position extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PositionInterface;

  functions: {
    borrow(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(address,address,uint256,uint256,uint16,address)"(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setUserUseReserveAsCollateral(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserUseReserveAsCollateral(address,address,bool)"(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapBorrowRateMode(address,address,uint256)"(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,address,address,uint256,address)"(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,address,uint256)"(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  borrow(
    lendingPool: string,
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(address,address,uint256,uint256,uint16,address)"(
    lendingPool: string,
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setUserUseReserveAsCollateral(
    lendingPool: string,
    asset: string,
    useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserUseReserveAsCollateral(address,address,bool)"(
    lendingPool: string,
    asset: string,
    useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    lendingPool: string,
    asset: string,
    rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapBorrowRateMode(address,address,uint256)"(
    lendingPool: string,
    asset: string,
    rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    lendingPool: string,
    asset: string,
    aTokenAddress: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,address,address,uint256,address)"(
    lendingPool: string,
    asset: string,
    aTokenAddress: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawETH(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawETH(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,address,uint256)"(
    asset: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,address,uint256,uint256,uint16,address)"(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setUserUseReserveAsCollateral(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserUseReserveAsCollateral(address,address,bool)"(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapBorrowRateMode(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapBorrowRateMode(address,address,uint256)"(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,address,address,uint256,address)"(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,address,uint256)"(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrow(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(address,address,uint256,uint256,uint16,address)"(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUserUseReserveAsCollateral(address,address,bool)"(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapBorrowRateMode(address,address,uint256)"(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,address,address,uint256,address)"(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,address,uint256)"(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(address,address,uint256,uint256,uint16,address)"(
      lendingPool: string,
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserUseReserveAsCollateral(address,address,bool)"(
      lendingPool: string,
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapBorrowRateMode(address,address,uint256)"(
      lendingPool: string,
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,address,uint256,address)"(
      lendingPool: string,
      asset: string,
      aTokenAddress: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,address,uint256)"(
      asset: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
